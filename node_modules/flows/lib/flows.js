
var sys = require('sys'),
      fs = require('fs'),
      print = sys.print,
      puts = sys.puts,
    Parser = require('../log/parse'),
      latestLogs = Parser.latestLogs,
      ThreadsStreamer = Parser.ThreadsStreamer,
      dt = Parser.dt
    ;
var exec = require('child_process').exec;

var writing= function(JSONObjectName_string)
{
   fs.writeFile(__dirname + "/flowConfig.config",JSONObjectName_string, function(err)
   {
     //say(801, err);
     if(!err)
       console.log("Done");
   });
}

exports.config = function (mod) {
  var path='';
  //var mod = 'dagwood';
  if(mod == 'dagwood')
    path = '~/dev/dagwood/dagwood/dagwood.js';
  else if(mod == 'dagwoodPrintServer')
    path = '~/dev/dagwood/dagwoodPrintServer/dagwoodPrintServer.js';
  else if(mod == 'lokiServer')
    path = '~/dev/dagwood/lokiServer/loki-server.js';
  exec('grep @flow '+path,function (er,out,oer) {
    var config = {},
        start = {},
        normal = {},
        end = {};
    var jobs=[];
    var lines = out.split('\n');
    lines.forEach(function (line) {
      var findKey = line.split('{');
      findKey = ''+findKey[1];
      var key = findKey.split(':');
      if((key.length > 1) && (jobs.indexOf(key[0]) == -1))
        jobs.push(key[0]);
    });
    jobs.forEach(function (job) {
      start[job] = [];
      end[job] = [];
      normal[job] = [];
      lines.forEach(function (line) {
        line = ''+line;
        var findId = line.split('(');
        findId = ''+findId[1];
        var id = findId.split(',');    
        if ((id[0]) && (line.indexOf(job) > -1)) {
          if (line.indexOf(':start') > -1)
          {
            start[job].push(id[0]);
          }
          else if (line.indexOf(':normal') > -1)
          {
            normal[job].push(id[0]);
          }
          else if (line.indexOf(':end') > -1)
          {
            end[job].push(id[0]);
          }
        }
      });
      config[job]= {
                     "server" : mod,
                     "start" : start[job],
                     "end" : end[job],
                     "normal" : normal[job]
                   };
    });
    console.log(config);
    writing(JSON.stringify(config))
  });
}

/*

function say(id)
{
//  if (id !== 999)
//    return;
  sys.print('flows (' + id + ')');
  var args = Array.prototype.slice.call(arguments, 1);
  args.forEach(function(arg) {
    sys.puts(sys.inspect(arg, false, null));
  });
}

function say2(id)
{
//  if (id !== 999)
//    return;
  sys.print('flows (' + id + ')');
  var args = Array.prototype.slice.call(arguments, 1);
  args.forEach(function(arg) {
    sys.print(sys.inspect(arg, false, null) + ',, ');
  });
  sys.puts('');
}

function msg(m,d)
{
  sys.print(m);
  sys.puts(sys.inspect(d, false, null));
}

function keys(d)
{
  var ret = [];
  for (var k in d)
    ret.push(k);
  return ret;
}

function parseLogFiles(filenames, callback)
{
  var msgIds = function(thread, obj, line)
  {
    thread.ids.push([obj.header.id, dt(obj, thread.startTime)]);
    thread.td.dot(dt(obj, thread.startTime));
  }
  
  var s = new ThreadsStreamer(filenames, function(err, streamer) {
if (1) {

    // Template
    //streamer._dumpOneMod('render', 'dagwoodPrintServer', [], [], []);

    streamer._dumpOneMod('preview', 'dagwoodPrintServer', [227], [404, 225], [211, 207, 804, 805, 806, 212, 208, 902, 807, 214, 800, 213, 216]);

    streamer._dumpOneMod('preRender', 'dagwoodPrintServer', [403], [219], [217, 218]);
    streamer._dumpOneMod('purchase', 'dagwood', [220], [414], [805, 406, 404, 407, 405, 408, 409, 219, 223, 226, 809, 230, 231, 810, 811, 901, 902, 903, 904, 905]);
    streamer._dumpOneMod('installedPrinters', 'dagwood', [224], [413], [225, 222, 227, 412, 800]);
    streamer._dumpOneMod('availablePrinters', 'dagwood', [225], [413], [222, 227]);
    streamer._dumpOneMod('getLokiServerName', 'dagwood', [216], [215], []);
    streamer._dumpOneMod('render', 'dagwoodPrintServer', [210], [203], [401, 228, 220, 204, 226, 901, 904, 905]);

    streamer._dumpOneMod('lokiServer_shovel', 'loki-server', [202], [206], [207, 204]);
    
    var currIds = {};
    var setCurrIds = function(id)
    {
      currIds[id] = true;
    }

    // This controls the flow across all the flows above
    streamer._onOneStart('currFlow', 'dagwoodPrintServer', 227, function(thread, obj, line) {
      currIds = {};
      setCurrIds('preview');
    }, {ids:[]});

    var currFlowNormal = function(flowName)
    {
      return function(thread, obj, line) 
      {
        setCurrIds(flowName);
      };
    };

    streamer._onOneNormal('currFlow', 'dagwoodPrintServer', 403, currFlowNormal('preRender'), {ids:[]});
    streamer._onOneNormal('currFlow', 'dagwood', 220, currFlowNormal('purchase'), {ids:[]});
    streamer._onOneNormal('currFlow', 'dagwood', 224, currFlowNormal('installedPrinters'), {ids:[]});
    streamer._onOneNormal('currFlow', 'dagwood', 225, currFlowNormal('availablePrinters'), {ids:[]});
    streamer._onOneNormal('currFlow', 'dagwood', 216, currFlowNormal('getLokiServerName'), {ids:[]});
    streamer._onOneNormal('currFlow', 'dagwoodPrintServer', 210, currFlowNormal('render'), {ids:[]});

    streamer._onOneEnd('currFlow', 'loki-server', 206, function(thread, obj, line) {
      setCurrIds('lokiServer_shovel');
    }, {ids:[]});
    
}
else {
    streamer._on('installedPrinters',
      [{mod:'dagwood',
          idhStart:{ids:[224], 
            handler:function(thread, obj, line) {
              msgIds(thread, obj, line);
            }},
          idhEnd:{ids:[413], 
            handler:function(thread, obj, line) {
              msgIds(thread, obj, line);
            }},
          idhNormal:{ids:[225, 222, 227, 412, 800], 
            handler:function(thread, obj, line) {
              msgIds(thread, obj, line);
            }}}
      ], 
      function() {return {ids:[], td:new timeDot()}}
//      {ids:[]}    // template
    );
}
    // Ctor
    function timeDot()
    {
      this.str = '                                                                                                    ;';
      this.dot = function(t_, dot_)
      {
        var digit = 0, max = 10;
        while (t_ >= max) {
          digit++;
          max *= 10;
        }
        //say2(998, t_, digit, max, digit * 10, (t_*10)/max);
        var t = digit * 10 + (t_*10)/max;
        var dot = dot_ || '*';
        if (t < this.str.length) {
          var newChar = '*';
          this.str = this.str.substr(0, t) + dot + this.str.substr(t+1);
        }
        else {
          this.dot(this.str.length-1, '-');
        }
      }
    }

    function show(x, msgA, msgB)
    {
      msgA && sys.print(msgA + ' ');
      msgB && sys.print(msgB + ' ');
      if (0) {
        var td = new timeDot();
        x.ids.forEach(function(id) {
          td.dot(Math.log(id[1]*1000));
        });
        sys.puts(td.str);
        return;
      }
      else {
        
        var msg = [];
        x.ids.forEach(function(id) {
          msg.push(id[0]);
  //        msg.push(id[1] + '- ' + id[0]);
        });
        var now = new Date();
        sys.print('('+(now-x.startTime)/1000 + 'sec): ');
        sys.puts(msg.join(', '));
      }
    }

    streamer.stream(function(err, threads) {
//      msg('', threads);
//      return;
      var badStateToShow = [], latests = [];
      for (var k in threads) {
        var latest = null, latestStart = 0, threadsToShow = [];

        threads[k].forEach(function(thread) {
          if (thread.startTime > latestStart) {
            latest = thread;
            latestStart = thread.startTime;
          }
//          if (((new Date()) - thread.startTime) < 1000 * 60 * 60 * 24) {
//            show(thread);
//          }
          else if (thread.state !== 'closed')
            badStateToShow.push([thread, k, thread.state]);
//            show(thread, k, thread.state);
        });
        if (latest)
          latests.push([latest, k, 'latest']);
      }
      
      var latestsSort = function(a,b)
      {
        return a.startTime - b.startTime;
      }
      latests.sort(latestsSort);
      
      sys.puts('Current: ');
      latests.forEach(function(x) {
//        var x = latests[k];
        if (x[1] in currIds)
          show(x[0], x[1], x[2]);
      });

      sys.puts('');
      sys.puts('Otherwise Latest: ');
      latests.forEach(function(x) {
//        var x = latests[k];
        if (!(x[1] in currIds))
          if (x[1] !== 'currFlow')
            show(x[0], x[1], x[2]);
      });

      sys.puts('');
      sys.puts('Bad State: ');
      badStateToShow.forEach(function(x) {
        if (x[1] !== 'currFlow')
          show(x[0], x[1], x[2]);
      });
      
    });
  });
}

function decending(a,b)
{
  return b-a;
}
  

function parseLogsFromVarLog()
{
  latestLogs(39, function(err, filenames) {
    parseLogFiles(filenames, function() {
    });
  });
}

if (__filename == process.argv[1]) {
  if (process.argv.length > 2 && process.argv[2] === 'varlog') {
    parseLogsFromVarLog();
  }
}
*/



