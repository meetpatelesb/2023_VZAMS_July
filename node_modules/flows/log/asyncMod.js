
var sys = require('sys');

function say(id)
{
  return;
  sys.print('asyncMod (' + id + ')');
  var args = Array.prototype.slice.call(arguments, 1);
  args.forEach(function(arg) {
    sys.puts(sys.inspect(arg, false, null));
  });
}
      
function createWrapper(Obj, origName, newName)
{
  var funcString = 
     "var This=this; \
      This.__onInitialized('" + newName + "', function() { \
        This['" + origName + "'].call(This, a, b, c, d, e, f, g);  \
      });";

  Obj[newName] = new Function("a", "b", "c", "d", "e", "f", "g", funcString);
  Obj['sys'] = sys;
}

var asyncMod = function(init_callback)
{
  this.initialized = false;
  this.initCompletions = [];
  
  this.__asyncInit = function()
  {
    var This = this;
    
    // Build forwarding functions
    for (var k in this) {
      if (typeof this[k] === 'function') {
        if (k[0] === '_' && k[1] != '_' && k != '_close') {
          var newName = k.slice(1);
          createWrapper(this, k, newName);
        }
      }
    }
    
    if ('_close' in this) {
      this.close = function(callback)
      {
        This.__onInitialized('close', function() {
          This._close(function(err, data) {
            if (typeof callback === 'function')
              callback(err, data);
          });
        });
      }
    }
    
    if ('init' in this) {
      this.init(function(err, data) {
        This.__finalizeInit(err, data || This);
      });
    }
    else {
      This.__finalizeInit(null, This);
    }
  }
  
  this.__finalizeInit = function(err, data)
  {
    var This = this;
    this.initialized = true;
    
    if (typeof init_callback === 'function')
      init_callback(err, data);
    
    // Finalize the initialization
    this.__clearInitCompletions();
  }
  
  this.__clearInitCompletions = function()
  {
    while (this.initCompletions.length > 0)
    {
      var item = this.initCompletions.shift();
      if (item.msg.length > 0)
        say(202, 'completing ' + item.msg + ' for: ' + this.name);
      item.callback();
    }
  }
  
  this.__onInitialized = function(msg, callback)
  {
    if (msg.length > 0)
      say(201, 'queueing ' + msg + ' for: ' + this.name);

    this.initCompletions.push({msg:msg, callback:callback});
    if (this.initialized)
      this.__clearInitCompletions();
  }
  
  this.__asyncInit();
}

exports.asyncMod = asyncMod

