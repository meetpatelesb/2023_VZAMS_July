
var sys = require('sys'),
    Parser = require('./log/parse'),
    latestLogs = Parser.latestLogs,
    SessionStreamer = Parser.SessionStreamer,
    isMatch = Parser.isMatch
    ;
var fs=require('fs');

var fun_convert=require('./csv_generation');

var min = Math.min;
var max = Math.max;

var tabMetricObj, avgTimemetricObj,eComResTimeMetricsObj,selectedTagMetrciObj, egiftTimeMetricObj, printJobTimeMetricObj;

function arrayMin (a) {
 return Math.min.apply(null,a);
}

function arrayMax (a) {
 return Math.max.apply(null,a);
}

function say(id) {
  if (id !== 999)
    return;
  sys.print('timeMetrics (' + id + ')');
  var args = Array.prototype.slice.call(arguments, 1);
  args.forEach(function(arg) {
    sys.puts(sys.inspect(arg, false, null));
  });
}

function msg(m,d) {
  sys.print(m);
  sys.puts(sys.inspect(d, false, null));
}

var sessions = {};

function parseLogFiles(metricPath, filenames, callback) {
  var tabKeeper;
  var tabTimeKeeper;
  var purchaseTime;
  var tagArt;
  var tagMerchant;
  var printMetric;
  var printinfoMetric;
  var matrixMajorData;
  var eGiftTimeMatrix;
  
  var s = new SessionStreamer(filenames, function(err, streamer) {
    // This is for the Diego-based UX when requesting the debug URL
    parseLogsForTime(err, streamer, function (tabKeeper_, tabTimeKeeper_, purchaseTime_, printMetric_, printinfoMetric_, matrixMajorData_, eGiftTimeMatrix_){
      
      tabKeeper = tabKeeper_;
      tabTimeKeeper = tabTimeKeeper_;
      purchaseTime = purchaseTime_;
      printMetric = printMetric_;
      printinfoMetric = printinfoMetric_;
      matrixMajorData = matrixMajorData_;
      eGiftTimeMatrix = eGiftTimeMatrix_;
      
    });

    parseLogsForTag(err, streamer, function (tagArt_, tagMerchant_) {
      tagArt = tagArt_;
      tagMerchant = tagMerchant_;
    });

    streamer.on('sg', 239, null, function(time, session, url, urlObj, obj, bsid, other) {
      say(207, time, session, url, urlObj, obj, bsid, other);
      if (session.startTime) {
      }
    });

    streamer.stream(function(err, sessions) {
      //msg('streams ', sessions);
      // Drop off metrics
      printDropOffMetrics(tabKeeper);

      // average time per tab metrics
      printAvgTimePerTabMetrics(tabKeeper, tabTimeKeeper);

      // average time for cashstar response
      printAvgEComResTimeMetrics(tabKeeper, purchaseTime);

      //time Elapsed to get EgiftCode
      printEgiftTimeMetrics(eGiftTimeMatrix);

      //Number of tags and Merchants selected
      printSelectedTagMetrics(tagArt, tagMerchant);
      
      //Print Job Time Metrics
      printTimeMetricsForPrintJob(printMetric);
      
      convertMetricsIntoJsonObject(metricPath, tabKeeper, tabTimeKeeper, purchaseTime, tagArt, tagMerchant, printMetric, printinfoMetric, matrixMajorData, eGiftTimeMatrix);
      
      callback(null);
 

    });
  });
}

var parseLogsForTime = function(err, streamer, callback) {
  var tabKeeper = [{},{},{},{},{},{},{},{},{},{}];
  var tabTimeKeeper = {0:[],1:[],2:[],3:[],4:[],5:[],6:[],7:[],8:[],9:[]};
  var purchaseTime = [];
  var printMetric = [];
  var printinfoMetric = [];
  var matrixMajorData=[{},{},{},{},{},{},{},{},{},{},{},{},{},{}];
  var eGiftTimeMatrix=[{},{},{},{}];
  

  streamer.onRes(/index-debug\.html/, function(time, session, url, urlObj, obj, bsid) {
    say(201, time, url, urlObj);
    session.startTime = time;
  });

  streamer.onRes(/index\.html/, function(time, session, url, urlObj, obj, bsid) {
    tabKeeper[0][bsid]=true;
    say(203, time, url, urlObj);
    session.startTime = time;
    matrixMajorData[0][bsid]=bsid;
    matrixMajorData[1][bsid]=time;
  });

  streamer.onRes(/on\/getData\/art/, function(time, session, url, urlObj, obj, bsid) {
    tabKeeper[1][bsid]=true;
    if (session.startTime) {
      say(202, time, url, urlObj, time - session.startTime);
      var delta = (time - session.startTime) / 1000;
      tabTimeKeeper[0].push(delta);
      matrixMajorData[2][bsid]=time;
      session.artPageTime = delta;
    }
  });

  /* now we are using other events
  streamer.onRes(/on\/choose\/art/, function(time, session, url, urlObj, obj, bsid) {
    if (session.startTime) {
      say(204, time, url, urlObj, time - session.startTime);
      var delta = (time - session.startTime) / 1000;
      //msg('time to choose art: ', delta);
      tabTimeKeeper[1].push(delta);
      session.chooseArt = time;
      session.chooseArtTime = session.chooseArtTime || [];
      session.chooseArtTime.push(delta);
    }
  });

  streamer.onRes(/on\/getData\/merchant/, function(time, session, url, urlObj, obj, bsid) {
    tabKeeper[3][bsid]=true;
    if (session.startTime) {
      say(205, time, url, urlObj, time - session.startTime);
      var delta = (time - session.startTime) / 1000;
      //msg('time to art page: ', delta);
     tabTimeKeeper[2].push(delta);
      session.artPageTime = delta;
    }
  });

  streamer.onRes(/on\/getData\/purchase/, function(time, session, url, urlObj, obj, bsid) {
    tabKeeper[4][bsid]=true;
    if (session.startTime) {
      say(206, time, url, urlObj, time - session.startTime);
      var delta = (time - session.startTime) / 1000;
      //msg('time to art page: ', delta);
     tabTimeKeeper[3].push(delta);
      session.parchaseSelectedtTime = time;
      session.artPageTime = delta;
    }
  });
  */

  streamer.onReq(/on\/click\/submit-purchase/, function(time, session, url, urlObj, obj, bsid) {
    if (session.startTime) {
      say(206, time, url, urlObj, time - session.startTime);
      var delta = (time - session.startTime) / 1000;
      session.purchaseRequest = time;
      matrixMajorData[6][bsid]=time;
      session.purchaseRequestTime = delta;
    }
  });

  // Printer name , card size

  streamer.onRes(/printInfo\.url/, function(time, session, url, urlObj, obj, bsid) {
    var details = {
      id: bsid,
      cardSize: obj[1],
      mediaSize: obj[2],
      printerName: obj[3] 
    };   
    
    printinfoMetric.push(details);
  });


  streamer.onRes(/on\/click\/submit-purchase/, function(time, session, url, urlObj, obj, bsid) {
    if (session.startTime) {
      say(206, time, url, urlObj, time - session.startTime);
      var delta = (time - session.startTime) / 1000
      session.purchaseResultTime = delta;
      if (session.purchaseRequestTime) {
        session.purchaseElapsedTime = session.purchaseResultTime - session.purchaseRequestTime;
        purchaseTime.push(session.purchaseElapsedTime);
      }
    }
  });

  ////eGiftCode
  streamer.onReq(/on\/getData\/egift/, function(time, session, url, urlObj, obj, bsid) {
    matrixMajorData[7][bsid]=time;
    eGiftTimeMatrix[0][bsid]=bsid;
    eGiftTimeMatrix[1][bsid]=time;
    session.reqTime = time;
  });

  streamer.onRes(/initialEgiftRes\.url/, function(time, session, url, urlObj, obj, bsid) {
    eGiftTimeMatrix[2][bsid]=time;
    session.initialResTime = time;
  });

  streamer.onRes(/on\/getData\/egift/, function(time, session, url, urlObj, obj, bsid) {
    matrixMajorData[8][bsid]=time;
    eGiftTimeMatrix[3][bsid]=time;
  });
  ////

  // User request for print -Dagwood Server
  streamer.onReq(/printdata\.url/, function(time, session, url, urlObj, obj, bsid) {
    session.printReqTime = time;
    matrixMajorData[9][bsid]=time;
  });

//Print job Started in Print Server
  streamer.onRes(/printjob\.url/, function(time, session, url, urlObj, obj, bsid) {
    session.jobStartTime = time;
    matrixMajorData[10][bsid]=time;
  });

  //Print job Finished in Print Server
  streamer.onRes(/printjob1\.url/, function(time, session, url, urlObj, obj, bsid) {
    session.jobFinishTime = time;
    matrixMajorData[11][bsid]=time;
  });


// for personalize tab
  
  streamer.onRes(/personalizeInfo\.url/, function(time, session, url, urlObj, obj, bsid) {
    
    if (session.startTime) {
      say(206, time, url, urlObj, time - session.startTime);
     //session.personalizeTime= time;
    }
  });

//Job Handover From Lokiserver
  streamer.onRes(/lokiprint\.url/, function(time, session, url, urlObj, obj, bsid) {
    session.printCompletedTime = time;
    matrixMajorData[12][bsid]=time;
    matrixMajorData[13][bsid]=time;
    var details = {
      id: bsid,
      printReqTime: session.printReqTime,
      jobStartTime: session.jobStartTime,
      jobFinishTime: session.jobFinishTime,
      printCompletedTime: session.printCompletedTime
    };
    printMetric.push(details);
  });

  streamer.onRes(/on\/client\/event/, function(time, session, url, urlObj, obj, bsid) {
    if(url.indexOf('Personalize') != -1 || isMatch(urlObj.queryObj, {event:'gototab', tabnum:3})) {
      matrixMajorData[5][bsid]=time;
      tabKeeper[3][bsid]=true;
      var delta = (time - session.startTime) / 1000;
      tabTimeKeeper[2].push(delta);
    }
    if(url.indexOf('Merchant')!= -1 || isMatch(urlObj.queryObj, {event:'gototab', tabnum:2})) {
      tabKeeper[2][bsid]=true;
      matrixMajorData[3][bsid]=time;
      var delta = (time - session.startTime) / 1000;
      tabTimeKeeper[1].push(delta);
     
    }
    if(url.indexOf('Purchase')!= -1 || isMatch(urlObj.queryObj, {event:'gototab', tabnum:4})) {
      tabKeeper[4][bsid]=true;
      session.parchaseSelectedtTime = time;
      var delta = (time - session.startTime) / 1000;
      tabTimeKeeper[3].push(delta);
    }
    if(url.indexOf('Placeorder')!= -1 || isMatch(urlObj.queryObj, {event:'formstep', active:1})) {
      tabKeeper[5][bsid]=true;
      var delta = (time - session.startTime) / 1000;
      tabTimeKeeper[4].push(delta);
    }
    if(url.indexOf('Print')!= -1 || isMatch(urlObj.queryObj, {event:'formstep', active:2})) {
      tabKeeper[6][bsid]=true;
      var delta = (time - session.startTime) / 1000;
      tabTimeKeeper[5].push(delta);
    }
    if(url.indexOf('PrintClick')!= -1 || isMatch(urlObj.queryObj, {event:'formstep', active:3})) {
      var delta = (time - session.startTime) / 1000;
      tabTimeKeeper[6].push(delta);
    }
  });
 
  callback(tabKeeper, tabTimeKeeper, purchaseTime, printMetric, printinfoMetric, matrixMajorData, eGiftTimeMatrix);
}

var parseLogsForTag = function(err, streamer, callback) {
  var tagArt=[];
  var tagMerchant=[];

  ////Num of arts and merchant
  streamer.onRes(/Design\.url/, function(time, session, url, urlObj, obj, bsid) {
    tagArt.push([bsid,obj[5]]);
  });

  streamer.onRes(/Merchant\.url/, function(time, session, url, urlObj, obj, bsid) {
    tagMerchant.push([bsid,obj[4].toString()+' $'+obj[5].toString()]);
  });
  ////

  callback(tagArt, tagMerchant);
}

var printDropOffMetrics = function(tabKeeper) {
  var tmparray = [];
  var tot = 0;
  console.log("_______________ Drop out log metrics ___________________");
  tmparray = keys(tabKeeper[0]);
  tot = tmparray.length;
  console.log("Total number of users \t: " + tot);
  if (tot) {
    console.log("Index tab       \t: " + ((tmparray.length) * 100 / tot).toString() + " %");
    tmparray = keys(tabKeeper[1]);
    console.log("Design tab      \t: " + ((tmparray.length) * 100 / tot).toString() + " %");
    tmparray = keys(tabKeeper[2]);
    console.log("Merchant tab    \t: " + ((tmparray.length) * 100 / tot).toString() + " %");
    tmparray = keys(tabKeeper[3]);
    console.log("Personalize tab    \t: " + ((tmparray.length) * 100 / tot).toString() + " %");
    tmparray = keys(tabKeeper[4]);
    console.log("Purchase tab    \t: " + ((tmparray.length) * 100 / tot).toString() + " %");
    tmparray = keys(tabKeeper[5]);
    console.log("Place Order tab    \t: " + ((tmparray.length) * 100 / tot).toString() + " %");
    tmparray = keys(tabKeeper[6]);
    console.log("Print tab       \t: " + ((tmparray.length) * 100 / tot).toString() + " %");
  }
  else console.log("No Session found");
}

var format = function(x)
{
  var s = x.toString();
  while (s.length < 7)
    s = ' ' + s;
  return s;
}

var printAvgTimePerTabMetrics = function(tabKeeper, tabTimeKeeper) {
  console.log("_______________ Average time per tab metrics ___________________");
  tmparray = keys(tabKeeper[0]);
  var agg = 0;
  tot = tmparray.length;
  if (tot) {
    console.log("Total number of users         \t\t: " + tot);
    agg = aggregate(tabTimeKeeper[0]);
    
    console.log("Average time on Index tab      \t\t: " + format(Math.round((agg / tot)*Math.pow(10,2))/Math.pow(10,2)) + " sec, max :" +  format(Math.round(arrayMax(tabTimeKeeper[0])*Math.pow(10,2))/Math.pow(10,2)) + " sec, min:" +  format(Math.round(arrayMin(tabTimeKeeper[0])*Math.pow(10,2))/Math.pow(10,2)) + "sec");
    agg = aggregate(tabTimeKeeper[1]);
    console.log("Average time on Design tab     \t\t: " + format(Math.round((agg / tot)*Math.pow(10,2))/Math.pow(10,2)) + " sec, max :" + format(Math.round(arrayMax(tabTimeKeeper[1])*Math.pow(10,2))/Math.pow(10,2)) + " sec, min :" + format(Math.round(arrayMin(tabTimeKeeper[1])*Math.pow(10,2))/Math.pow(10,2)) + " sec");
    
    //      agg=aggregate(tabTimeKeeper[2]);
    //      console.log("Average time to Choose a design\t: " + (agg/tot).toString() + " sec," + " max " +
    //                  arrayMax(tabTimeKeeper[2])+ " sec,"+ " min " + arrayMin(tabTimeKeeper[2]) + " sec" );
  agg = aggregate(tabTimeKeeper[2]);
    console.log("Average time on Merchant tab   \t\t: " + format(Math.round((agg / tot)*Math.pow(10,2))/Math.pow(10,2)) + " sec, max :" + format(Math.round(arrayMax(tabTimeKeeper[2])*Math.pow(10,2))/Math.pow(10,2)) + " sec, min :" + format(Math.round(arrayMin(tabTimeKeeper[2])*Math.pow(10,2))/Math.pow(10,2)) + " sec");
    agg = aggregate(tabTimeKeeper[3]);
    console.log("Average time on Personalize tab \t: " +format(Math.round((agg / tot)*Math.pow(10,2))/Math.pow(10,2)) + " sec, max :" + format(Math.round(arrayMax(tabTimeKeeper[3])*Math.pow(10,2))/Math.pow(10,2)) + " sec, min :" + format(Math.round(arrayMin(tabTimeKeeper[3])*Math.pow(10,2))/Math.pow(10,2)) + " sec");
    agg = aggregate(tabTimeKeeper[4]);
    console.log("Average time on Purchase tab    \t: " +format(Math.round((agg / tot)*Math.pow(10,2))/Math.pow(10,2)) + " sec, max :" + format(Math.round(arrayMax(tabTimeKeeper[4])*Math.pow(10,2))/Math.pow(10,2)) + " sec, min :" + format(Math.round(arrayMin(tabTimeKeeper[4])*Math.pow(10,2))/Math.pow(10,2)) + " sec");
    agg = aggregate(tabTimeKeeper[5]);
    console.log("Average time on Placeorder tab  \t: " +format(Math.round((agg / tot)*Math.pow(10,2))/Math.pow(10,2)) + " sec, max :" + format(Math.round(arrayMax(tabTimeKeeper[5])*Math.pow(10,2))/Math.pow(10,2)) + " sec, min :" + format(Math.round(arrayMin(tabTimeKeeper[5])*Math.pow(10,2))/Math.pow(10,2)) + " sec");
    agg = aggregate(tabTimeKeeper[6]);
    console.log("Average time on Print tab      \t\t: " +format(Math.round((agg / tot)*Math.pow(10,2))/Math.pow(10,2)) + " sec, max :" + format(Math.round(arrayMax(tabTimeKeeper[6])*Math.pow(10,2))/Math.pow(10,2)) + " sec, min :" + format(Math.round(arrayMin(tabTimeKeeper[6])*Math.pow(10,2))/Math.pow(10,2)) + " sec");
  }
  else console.log("No Session found");
}

var printAvgEComResTimeMetrics = function(tabKeeper, purchaseTime) {
  
  console.log("____________ Average  eCom response time  metrics _____________");
  tmparray = keys(tabKeeper[0]);
  var eComResp = 0;
  tot = tmparray.length;
  agg = aggregate(purchaseTime);
  if (tot) console.log("Average eCom response time    \t: " +Math.round((agg / tot)*Math.pow(10,2))/Math.pow(10,2)+ " sec," + " max " +Math.round((arrayMax(purchaseTime))*Math.pow(10,2))/Math.pow(10,2)+ " sec," + " min " + Math.round((arrayMin(purchaseTime))*Math.pow(10,2))/Math.pow(10,2) + " sec");
  else console.log("No Session found");
}

var printEgiftTimeMetrics = function(eGiftTimeMatrix) {
  console.log("______________EGiftCode Time Elapsed Time Matrics_________________");
  console.log(" User \t \t \t \t \t \t" + "InitialResponse \t \t" + "FinalResponse \t \t")
  var tmparray = keys(eGiftTimeMatrix[0]);
  for(var i=0;i<tmparray.length;i++)
  {
    
    for(var k=1;k<eGiftTimeMatrix.length;k++)
    {
      tmparray1=values(eGiftTimeMatrix[k]);
      var egiftReq,egiftRes;
      for(var j=0;j<tmparray1.length;j++)
      {
        if(tmparray[i] ==tmparray1[j].key){
          switch(k)
          {
            case 1:
              egiftReq= tmparray1[j].value;
              break;
            case 3:
              egiftRes= tmparray1[j].value;
              break;
          }
        }
      }
    }
    console.log(tmparray[i] + "\t " + egiftReq+"\t \t" + egiftRes);
  }
}

var printSelectedTagMetrics = function(tagArt, tagMerchant) {
  console.log("_______The Number of each art selected_______");
  print(getcount(tagArt));

  console.log("_______The Number of each merchant + amount selected_______");
  print(getcount(tagMerchant));
}

var printTimeMetricsForPrintJob = function(printMetric) {
  console.log("_______print job time Metric in TimeStamp_______");
  console.log("\t \t  user \t \t \t" + "printReqTime \t \t" + "jobStartTime \t \t " + "jobFinishTime  \t \t" + "printCompletedTime \t \t");

  printMetric.forEach(function(item) {
    console.log(item.id + '  ' + item.printReqTime + ' ' + item.jobStartTime + ' ' + item.jobFinishTime + ' ' + item.printCompletedTime);
  });

  console.log("_____________print job time Metric in Actual Time____________");
  console.log("\t \t  user \t \t \t" + "printReqTime \t \t" + "jobStartTime \t \t " + "jobFinishTime  \t \t" + "printCompletedTime \t \t");

  printMetric.forEach(function(item) {
    var reqTime = Number(item.printReqTime);
    var reqDate = new Date(reqTime);
    var reqDateTime = reqDate.getDate() + '/' + reqDate.getMonth() + '/' + reqDate.getFullYear() + ',' + reqDate.getHours() + ':' + reqDate.getMinutes() + ':' + reqDate.getSeconds() + ':' + reqDate.getMilliseconds();
    var startTime = Number(item.jobStartTime);
    var startDate = new Date(startTime);
    var startDateTime = startDate.getDate() + '/' + startDate.getMonth() + '/' + startDate.getFullYear() + ',' + startDate.getHours() + ':' + startDate.getMinutes() + ':' + startDate.getSeconds() + ':' + startDate.getMilliseconds();
    var finishTime = Number(item.jobFinishTime);
    var finishDate = new Date(finishTime);
    var finishDateTime = finishDate.getDate() + '/' + finishDate.getMonth() + '/' + finishDate.getFullYear() + ',' + finishDate.getHours() + ':' + finishDate.getMinutes() + ':' + finishDate.getSeconds() + ':' + finishDate.getMilliseconds();
    var completedTime = Number(item.printCompletedTime);
    var completedDate = new Date(completedTime);
    var completedDateTime = completedDate.getDate() + '/' + completedDate.getMonth() + '/' + completedDate.getFullYear() + ',' + completedDate.getHours() + ':' + completedDate.getMinutes() + ':' + completedDate.getSeconds() + ':' + completedDate.getMilliseconds();
    console.log(item.id + '  ' + reqDateTime + ' ' + startDateTime + ' ' + finishDateTime + ' ' + completedDateTime);
  });

  console.log("_______Time taken for print _______");
  console.log("\t \t user \t \t \t " + " Time Taken for Print ");
  printMetric.forEach(function(item) {
    console.log(item.id + "\t " + ((item.printCompletedTime - item.printReqTime) / 1000));
  });
}

// here is fuction in which the creation of JSON and converting to csv occures
 
var convertMetricsIntoJsonObject = function(metricPath, tabKeeper, tabTimeKeeper, purchaseTime, tagArt, tagMerchant, printMetric, printinfoMetric, matrixMajorData, eGiftTimeMatrix ) {

  
  var tmparray = [];
  var tot = 0;
  tmparray = keys(tabKeeper[0]);
  tot = tmparray.length;

  if(tot){

   //Creating the JSON  
     
    var drop=fun_convert.dropout(tabKeeper,tot);
    var egift_json=fun_convert.egift(eGiftTimeMatrix);
    var avg_time_tab=fun_convert.timePerTab(tabTimeKeeper,tot);
    var selected_matrix=fun_convert.selectedTab(tagArt,tagMerchant); 
    var userselect=fun_convert.userSelect(printinfoMetric,tagArt,tagMerchant);
    var userTimeKeep=fun_convert.userTimeKeeping(matrixMajorData);
    
    
   // convert the JSON into the corresoponding CSV format    

    var dropout=fun_convert.convert(drop[0].dropout);
    var egift=fun_convert.convert(egift_json[0].egift);
    var avg_time=fun_convert.convert(avg_time_tab[0].avg_time_tab);
    var select_tag=fun_convert.convert(selected_matrix[0].select_tag);
    

    // Writes into the files 
    console.log("_______CSV Generation _______");

    try
    {
      stats = fs.lstatSync(metricPath);
      metricPath=metricPath;
    }
    catch (e)
    {
      metricPath=__dirname;
    }

    fs.mkdir(metricPath+'/csv',0777,function(err)
    {  
      
      fs.writeFile(metricPath+"/csv/csv_matrix_roll_ups.csv","DropOut :\n"+dropout+"\n\nAverageTime On Tab : \n"+avg_time+"\n\nE-Gift Time Matrix : \n"+egift+"\n\nSelected Tag Matrix : \n"+select_tag, function(err)
      {
        if(err)
        {
          console.log(err);
        }
        else
        {  
          console.log("File in - "+metricPath+'/csv/csv_matrix_roll_ups.csv');
        }
      }); 
      
      var user_data=fun_convert.convert(userselect[0].user_data);
      
      fs.writeFile(metricPath+"/csv/csv_matrix_user_select.csv","User Selection :\n"+user_data, function(err)
      {
        if(err)
        {
          console.log(err);
        }
        else
        {
          console.log("File in - "+metricPath+'/csv/csv_matrix_user_select.csv');
        }
      });

      var major_data=fun_convert.convert(userTimeKeep[0].major_data );
      fs.writeFile(metricPath+"/csv/csv_matrix_major_data.csv","Major User Data :\n"+major_data, function(err)
      {
        if(err)
        {
          console.log(err);
        }
        else
        {  
          console.log("File in - "+metricPath+'/csv/csv_matrix_major_data.csv');
        }
      });
    });
  }
  else
  console.log("No Session found No user ");

}


function parseLogsFromVarLog(metricPath, logsLimit, logFilePath)
{
  latestLogs(logsLimit,logFilePath, function(err, filenames) {
   
    
    if(filenames){
      if(filenames.length>0)
      {
        parseLogFiles(metricPath, filenames, function() 
        {
        });
      }
      else
        console.log("Log files not found");
    }
    else
    console.log("Log files not found");
  });
}

if (__filename == process.argv[1]) {
  if (process.argv.length > 2 && process.argv[2] === 'varlog') {
    var configFile=__dirname +'/config.json';
    fs.readFile(configFile, 'utf8', function(err,json_string){
      if(err) {
	      console.error("Could not open config file: ", err);
        process.exit(1);
	    }
	 
	    try {
        var str = eval('('+ json_string + ')');
        var metricPath = str.outPutPath;
        var logsLimit = str.logsLimit;
        var logFilePath = str.inputPath;
        parseLogsFromVarLog(metricPath, logsLimit, logFilePath);
	    }
	    catch(exception) {
	      console.error("There was an error parsing the json config file: ", exception);
	   
	    }
	  });
  }
}

function keys(d) {
  var ret = [];
  for (var k in d)
  	ret.push(k);
  return ret;
}

function aggregate(a) {
  var total = 0;
  var l = a.length;
  for (var i = 0 ;  i<l ; i++)
    total += a[i];
  return total;
}

var getcount = function(tmp) {
  var count = {};
  for(var i = 0; i < tmp.length; i++) {
    count[tmp[i][1]] = (count[tmp[i][1]] || 0) + 1;
  }
  return count;
}

var print = function(tmp) {
  for (value in tmp) {
    console.log(value+" \t: "+ tmp[value]);
  }
}


var getcount_change = function(tmp) {
  var count = {};
  for(var i = 0; i < tmp.length; i++) {
    
    count[tmp[i][1]] = (count[tmp[i][1]] || 0) + 1;
    
  }
  
  return count;
}

function values(d) {
    
  var ret = [];
  for (var k in d){
    var obj={'key':k , 'value':d[k]};
    ret.push(obj);
  }
 
  return ret;
}
