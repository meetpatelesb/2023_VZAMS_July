
var sys = require('sys'),
    Parser = require('./log/parse'),
    latestLogs = Parser.latestLogs,
    SessionStreamer = Parser.SessionStreamer,
    isMatch = Parser.isMatch
    ;
var fs=require('fs');

var fun_convert=require('./csv_generation');

var matrixMajorData=[{},{},{},{},{},{},{},{},{},{},{},{},{},{}];

var configFile=__dirname +"/metric.config";

function say(id) {
  if (id !== 999)
    return;
  sys.print('timeMetrics (' + id + ')');
  var args = Array.prototype.slice.call(arguments, 1);
  args.forEach(function(arg) {
    sys.puts(sys.inspect(arg, false, null));
  });
}

function msg(m,d) {
  sys.print(m);
  sys.puts(sys.inspect(d, false, null));
}

var sessions = {};
setInterval(function() {
var currentTime = new Date();  // To get Current date
var time=currentTime.getHours() + ':' + currentTime.getMinutes() + ':' + currentTime.getSeconds()+':'+currentTime.getMilliseconds();
console.log('Current Time :'+time);
console.log('******** Major User Data Metric Details **********');
console.log('**************************************************');
function parseLogFiles(filenames, callback) {
  
  var s = new SessionStreamer(filenames, function(err, streamer) {
    // This is for the Diego-based UX when requesting the debug URL
   parseLogsForTime(err, streamer, function() {
      say(222,err,'error');
    });

    streamer.stream(function(err, sessions) {
          displayMajorUserdata(matrixMajorData);
        callback(null);
 
    });
  });
}

var parseLogsForTime = function(err, streamer, callback) {

  streamer.onRes(/index\.html/, function(time, session, url, urlObj, obj, bsid) {
    say(203, time, url, urlObj);
    matrixMajorData[0][bsid]=bsid;
    matrixMajorData[1][bsid]=time;
  });

  streamer.onRes(/on\/getData\/art/, function(time, session, url, urlObj, obj, bsid) {

    if (session.startTime) {
      say(202, time, url, urlObj, time - session.startTime);
      matrixMajorData[2][bsid]=time;
    }
  });

  streamer.onRes(/on\/choose\/art/, function(time, session, url, urlObj, obj, bsid) {
    if (session.startTime) {
      say(204, time, url, urlObj, time - session.startTime);
      matrixMajorData[3][bsid]=time;
    }
  });


  streamer.onRes(/on\/getData\/purchase/, function(time, session, url, urlObj, obj, bsid) {
       if (session.startTime) {
      say(206, time, url, urlObj, time - session.startTime);
      matrixMajorData[4][bsid]=time;
    }
  });

  streamer.onReq(/on\/click\/submit-purchase/, function(time, session, url, urlObj, obj, bsid) {
    if (session.startTime) {
      say(206, time, url, urlObj, time - session.startTime);

      matrixMajorData[6][bsid]=time;

    }
  });

//eGiftCode
  streamer.onReq(/on\/getData\/egift/, function(time, session, url, urlObj, obj, bsid) {
    matrixMajorData[7][bsid]=time;
  });

  streamer.onRes(/on\/getData\/egift/, function(time, session, url, urlObj, obj, bsid) {
    matrixMajorData[8][bsid]=time;
  });

// User request for print -Dagwood Server
  streamer.onReq(/printdata\.url/, function(time, session, url, urlObj, obj, bsid) {
    matrixMajorData[9][bsid]=time;
  });

//Print job Started in Print Server
  streamer.onRes(/printjob\.url/, function(time, session, url, urlObj, obj, bsid) {
    matrixMajorData[10][bsid]=time;
  });

//Print job Finished in Print Server
  streamer.onRes(/printjob1\.url/, function(time, session, url, urlObj, obj, bsid) {
    matrixMajorData[11][bsid]=time;
  });

//Job Handover From Lokiserver
  streamer.onRes(/lokiprint\.url/, function(time, session, url, urlObj, obj, bsid) {
       matrixMajorData[12][bsid]=time;
    matrixMajorData[13][bsid]=time;
  });

  streamer.onRes(/on\/client\/event/, function(time, session, url, urlObj, obj, bsid) {
    if(url.indexOf('Personalize') != -1 || isMatch(urlObj.queryObj, {event:'gototab', tabnum:3})) {
      matrixMajorData[5][bsid]=time;
    }
  });
}

// Display Major User Data

var displayMajorUserdata = function(matrixMajorData) {
  var tmparray = keys(matrixMajorData[0]);
  var tmparray1;
  var artTime;
console.log("\t\t\t User ID"+'\t|'+' Home Page  '+'|'+' SelectArt '+'|'+' SelectGift '+'|'+' PersonalInfo '+'|'+' PurchaseReq '+'|'+' PrintReq '+'|'+' PrintComplete ')
console.log(' ');

  for(var i=0;i<tmparray.length;i++) {

    for(var k=1;k<matrixMajorData.length;k++) {
          var PageStart,artPageStart,chooseArtTime,chooseMerchantTime,personalizeTime,purchaseRequest,reqTime,resTime,printReqTime,jobStartTime,jobFinishTime,printCompletedTime,startofcompletionScreen;
      
      tmparray1=values(matrixMajorData[k]);
      
      for(var j=0;j<tmparray1.length;j++) {
        if(tmparray[i] ==tmparray1[j].key) {
          switch(k)
           {
            case 1:
              //PageStart= tmparray1[j].value;
               PageStart= '******';
              break;
            case 2:
              //artPageStart= tmparray1[j].value;
              artPageStart= '******';
              break;
            case 3:
              //chooseArtTime= tmparray1[j].value;
              chooseArtTime= '******';
              break;
            case 4:
              //chooseMerchantTime= tmparray1[j].value;
              chooseMerchantTime= '******';
              break;
            case 5:
              //personalizeTime= tmparray1[j].value;
              personalizeTime= '******';
              break;
            case 6:
             // purchaseRequest= tmparray1[j].value;
              purchaseRequest= '******';
              break;
            case 7:
             // reqTime= tmparray1[j].value;
              reqTime= '******';
              break;
            case 8:
             // resTime= tmparray1[j].value;
              resTime= '******';
              break;
            case 9:
             // printReqTime= tmparray1[j].value;
              printReqTime= '******';
              break;
            case 10:
             // jobStartTime= tmparray1[j].value;
              jobStartTime= '******';
              break;
            case 11:
             // jobFinishTime= tmparray1[j].value;
              jobFinishTime= '******';
              break;
            case 12:
             // printCompletedTime= tmparray1[j].value;
              printCompletedTime= '******';
              break;
            case 13:
             // startofcompletionScreen= tmparray1[j].value;
              startofcompletionScreen= '******';
              break;
            }
          }
        }
      }
console.log(tmparray[i]+"||"+PageStart+"||"+chooseArtTime+"||"+chooseMerchantTime+"||"+personalizeTime+"||"+purchaseRequest+"||"+printReqTime+"||"+printCompletedTime)
console.log(' ');
    PageStart='undefined';
    artPageStart='undefined';
    chooseArtTime ='undefined'; 
    chooseMerchantTime ='undefined';
    personalizeTime='undefined';
    purchaseRequest='undefined';
    reqTime='undefined';
    resTime='undefined';
    printReqTime='undefined';
    jobStartTime='undefined';
    jobFinishTime='undefined';
    printCompletedTime='undefined';
    startofcompletionScreen='undefined';
  }
}

function parseLogsFromVarLog()
{
 
  var no_Logs=(fs.readFileSync(configFile).toString().split('\n'))[1].split('=')[1];
  latestLogs(no_Logs, function(err, filenames) {
     if(filenames){
      if(filenames.length>0)
      {
        parseLogFiles(filenames, function() 
        {
        });
      }
      else
        console.log("Log files not found");
    }
    else
    console.log("Log files not found");
  });
}

if (__filename == process.argv[1]) {
  if (process.argv.length > 2 && process.argv[2] === 'varlog') {
    parseLogsFromVarLog();
  }
}

function keys(d) {
  var ret = [];
  for (var k in d)
  	ret.push(k);
  return ret;
}

var print = function(tmp) {
  for (value in tmp) {
    console.log(value+" \t: "+ tmp[value]);
  }
}

function values(d) {
    
  var ret = [];
  for (var k in d){
   var obj={'key':k , 'value':d[k]};
  ret.push(obj);
    }
return ret;
}
},30000);
