
// Parse log files and display which code path was taken.



var sys = require('sys'),
      print = sys.print,
      puts = sys.puts,
    Parser = require('./log/parse'),
      latestLogs = Parser.latestLogs,
      ThreadsStreamer = Parser.ThreadsStreamer,
      dt = Parser.dt
    ;

function say(id)
{
  sys.print('whichway (' + id + ')');
  var args = Array.prototype.slice.call(arguments, 1);
  args.forEach(function(arg) {
    sys.puts(sys.inspect(arg, false, null));
  });
}

function say2(id)
{
  sys.print('whichway (' + id + ')');
  var args = Array.prototype.slice.call(arguments, 1);
  args.forEach(function(arg) {
    sys.print(sys.inspect(arg, false, null) + ',, ');
  });
  sys.puts('');
}

function msg(m,d)
{
  sys.print(m);
  sys.puts(sys.inspect(d, false, null));
}

function keys(d)
{
  var ret = [];
  for (var k in d)
    ret.push(k);
  return ret;
}

function parseLogFiles(filenames, callback)
{
  var msgIds = function(thread, obj, line)
  {
    thread.ids.push([obj.header.id, dt(obj, thread.startTime)]);
    thread.td.dot(dt(obj, thread.startTime));
  }
  
  var s = new ThreadsStreamer(filenames, function(err, streamer) {
    // The functionality to call
    var previewCache = function(flowName, id, which)
    {
      switch (which)
      {
        case '_start':
          return function(thread, obj, line) 
          {
            sys.print(flowName + ': ');
          };
          break;
          
        case '_end':
          return function(thread, obj, line) 
          {
            sys.puts('.');
          };
          break;
          
        default:
          return function(thread, obj, line) 
          {
            sys.print(''+id + ' ' + which);
          };
          break;
      }
    };

    streamer._onOneStart('previewCache', 'dagwoodPrintServer', 234, previewCache('previewCache', 234, '_start'), {ids:[]});

    streamer._onOneNormal('previewCache', 'dagwoodPrintServer', 225, previewCache('previewCache', 225, 'file in gridfs cache'), {ids:[]});
    streamer._onOneNormal('previewCache', 'dagwoodPrintServer', 213, previewCache('previewCache', 213, 'file present in tmp'), {ids:[]});
    streamer._onOneNormal('previewCache', 'dagwoodPrintServer', 236, previewCache('previewCache', 236, 'generating preview'), {ids:[]});
    streamer._onOneNormal('previewCache', 'dagwoodPrintServer', 215, previewCache('previewCache', 215, 'stat threw'), {ids:[]});

    streamer._onOneEnd('previewCache', 'dagwoodPrintServer', 225, previewCache('previewCache', 225, '_end'), {ids:[]});
    streamer._onOneEnd('previewCache', 'dagwoodPrintServer', 404, previewCache('previewCache', 404, '_end'), {ids:[]});

    streamer.stream(function(err, threads) {
      sys.puts('');
    });
  });
}

function decending(a,b)
{
  return b-a;
}
  

function parseLogsFromVarLog()
{
  latestLogs(39, function(err, filenames) {
    parseLogFiles(filenames, function() {
    });
  });
}

if (__filename == process.argv[1]) {
  if (process.argv.length > 2 && process.argv[2] === 'varlog') {
    parseLogsFromVarLog();
  }
}




