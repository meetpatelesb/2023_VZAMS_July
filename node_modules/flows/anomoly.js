
var sys = require('sys'),
    Parser = require('./log/parse'),
      latestLogs = Parser.latestLogs,
      LogFilesStreamer = Parser.LogFilesStreamer
    ;

function say(id)
{
  if (id !== 999)
    return;
  sys.print('timeMetrics (' + id + ')');
  var args = Array.prototype.slice.call(arguments, 1);
  args.forEach(function(arg) {
    sys.puts(sys.inspect(arg, false, null));
  });
}

function msg(m,d)
{
  sys.print(m);
  sys.puts(sys.inspect(d, false, null));
}

var sessions = {};

function parseLogFiles(filenames, callback)
{
  var anomolies = {undef:[], parseError:[]};
  
  var s = new LogFilesStreamer(filenames, function(err, streamer) {    
    streamer.on(/sg/, function(obj, line) {
      
      if (typeof obj === 'object') {
        for (var k in obj) {
          if (obj[k] === 'undefined')
            anomolies.undef.push(line);
          if (typeof obj[k] === 'object' && 'merticsParseError' in obj[k])
            anomolies.parseError.push(line);
        }
      }
      else if (obj instanceof Array) {
        obj.forEach(function(x) {
          if (x === 'undefined')
            anomolies.undef.push(line);
        });
      }
    });
    
    streamer.stream(function(err) {
      msg('Anomolies: ', anomolies);
    });
  });
}

function parseLogsFromVarLog()
{
  latestLogs(15, function(err, filenames) {
    parseLogFiles(filenames, function() {
    });
  });
}

if (__filename == process.argv[1]) {
  if (process.argv.length > 2 && process.argv[2] === 'varlog') {
    parseLogsFromVarLog();
  }
}




